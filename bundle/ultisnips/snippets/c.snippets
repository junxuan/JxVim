###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet def "#ifndef … #define … #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"$0
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1:iostream}>$0
endsnippet

snippet uns "using namespace"
using namespace ${1:std;}$0
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main() {
    $0

    return 1;
}
endsnippet

snippet mainc "main(argc, argv) (main)"
int main (int argc, char const *argv[]) {
	$0
	return 0;
}
endsnippet

snippet for "for int loop (fori)"
for (${1:int} ${2:i} = ${3:0}; $2 < ${4:count}; ${5:++$2}) {
	$0
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''
	snip.rv = name
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */

endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};$0
endsnippet

snippet do "do...while loop (do)"
do {
	${0:/* code */ }
} while(${1:/* condition */});
endsnippet

snippet while "while loop"
while (${1:/* condition */}) {
    $0
}
endsnippet

snippet fprintf "fprintf …"
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if(${1:/* condition */}) {
	${0:/* code */ }
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet struct "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

